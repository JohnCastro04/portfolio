---
import JohnImage from "../assets/johnImage.webp";

import Github from "../components/icons/Github.astro";
import CvDownload from "../components/icons/CvDownload.astro";
import MailIcon from "../components/icons/MailIcon.astro";
import LinkedinIcon from "../components/icons/LinkedinIcon.astro";
---

<section id="inicio" class="hero">
  <div class="particles" id="particles"></div>

  <div class="hero-text">
    <h1 class="highlight">John Castro</h1>
    
    <h2 class="subtitle">
      <span id="animated-subtitle" class="animated-subtitle">Desarrollador Web Full-Stack</span>
    </h2>

    <p>
      Apasionado por la tecnología, disfruto aprender constantemente y me motiva
      enfrentar cada reto con dedicación y enfoque para crecer como profesional.
    </p>

    <div class="hero-actions mobile-only">
      <a href="https://www.linkedin.com/in/johncastrod" class="action-btn" aria-label="LinkedIn">
        <LinkedinIcon color="var(--main-color)" size={26} />
      </a>

      <a href="https://github.com/JohnCastro04" class="action-btn" aria-label="GitHub">
        <Github color="var(--main-color)" size={26} />
      </a>

      <a href="mailto:johncastrod04@gmail.com" class="action-btn" aria-label="Email">
        <MailIcon color="var(--main-color)" size={26} />
      </a>

      <a
        href="https://raw.githubusercontent.com/JohnCastro04/portfolio/master/public/John%20Castro%20-%20Curriculum%20vitae.pdf"
        download
        class="action-btn primary"
        aria-label="Descargar CV"
      >
        <CvDownload color="var(--main-color)" size={26} />
      </a>
    </div>
  </div>

  <div class="hero-image">
    <img
      src={JohnImage.src}
      alt="John Castro"
      fetchpriority="high"
      draggable="false"
    />
  </div>
</section>

<script>
  import { gsap } from 'gsap';

  document.addEventListener("DOMContentLoaded", () => {
    const subtitleElement = document.getElementById("animated-subtitle");
    
    // Función para dividir texto en elementos span para animación
    const splitTextIntoChars = (element) => {
      const text = element.textContent;
      element.innerHTML = '';
      
      [...text].forEach(char => {
        const span = document.createElement('span');
        span.textContent = char === ' ' ? '\u00A0' : char;
        span.className = 'char';
        element.appendChild(span);
      });
      
      return element.querySelectorAll('.char');
    };
    
    // Dividir el subtítulo en caracteres
    const chars = splitTextIntoChars(subtitleElement);
    
    // Animación inicial del subtítulo
    gsap.set(chars, {
      opacity: 0,
      y: 20,
      scale: 0.8
    });
    
    // Timeline para la animación del subtítulo
    const subtitleTl = gsap.timeline({ delay: 0.8 });
    
    subtitleTl.to(chars, {
      opacity: 1,
      y: 0,
      scale: 1,
      duration: 0.6,
      stagger: {
        amount: 0.8,
        from: "start"
      },
      ease: "back.out(1.7)"
    });
    
    // Animación sutil continua (efecto de respiración)
    gsap.to(subtitleElement, {
      scale: 1.02,
      duration: 3,
      repeat: -1,
      yoyo: true,
      ease: "power2.inOut",
      delay: 2
    });
    
    // ============= ANIMACIONES DE ENTRADA GSAP =============
    
    // Animación principal del título
    gsap.from(".hero-text h1", {
      opacity: 0,
      y: 50,
      scale: 0.9,
      duration: 1,
      ease: "power3.out",
      delay: 0.2
    });
    
    // Animación del párrafo
    gsap.from(".hero-text p", {
      opacity: 0,
      y: 30,
      duration: 0.8,
      delay: 2,
      ease: "power2.out"
    });
    
    // Animación de los botones de acción
    gsap.from(".hero-actions .action-btn", {
      opacity: 0,
      y: 30,
      scale: 0.8,
      duration: 0.6,
      delay: 2.5,
      stagger: 0.1,
      ease: "back.out(2)"
    });
    
    // Animación de la imagen con efecto parallax
    gsap.from(".hero-image img", {
      opacity: 0,
      scale: 1.1,
      y: 30,
      duration: 1.2,
      delay: 0.5,
      ease: "power2.out"
    });
    
    // Micro-interacciones con hover en los botones
    document.querySelectorAll('.action-btn').forEach(btn => {
      btn.addEventListener('mouseenter', () => {
        gsap.to(btn, {
          scale: 1.1,
          y: -3,
          duration: 0.3,
          ease: "back.out(2)"
        });
      });
      
      btn.addEventListener('mouseleave', () => {
        gsap.to(btn, {
          scale: 1,
          y: 0,
          duration: 0.3,
          ease: "back.out(2)"
        });
      });
    });

    // ============= ANIMACIÓN DE PARTÍCULAS =============
    const container = document.getElementById("particles");
    const totalParticles = 30; 

    for (let i = 0; i < totalParticles; i++) {
      const particle = document.createElement("div");
      particle.classList.add("particle");

      particle.style.left = `${Math.random() * 100}%`;

      const size = Math.random() * 4 + 2;
      particle.style.width = `${size}px`;
      particle.style.height = `${size}px`;

      particle.style.animationDuration = `${15 + Math.random() * 10}s`;
      particle.style.animationDelay = `${-Math.random() * 20}s`;

      container.appendChild(particle);
    }
  });
</script>

<style>
  .subtitle {
    margin-top: 0.2rem;
  }

  .animated-subtitle {
    display: inline-block;
    color: var(--text-color-sub);
    position: relative;
    font-weight: 500;
    letter-spacing: 0.02em;
    transform-origin: center;
  }
  
  /* Estilo para los caracteres individuales */
  .char {
    display: inline-block;
    will-change: transform, opacity;
  }
  
  /* Mejoras generales para el hero */
  .hero-text h1 {
    transform: translateZ(0); /* Optimización para GPU */
    will-change: transform, opacity;
  }
  
  .hero-text p {
    transform: translateZ(0);
    will-change: transform, opacity;
  }
  
  .hero-actions .action-btn {
    transform: translateZ(0);
    will-change: transform, opacity;
    transition: box-shadow 0.3s ease;
  }
  
  .hero-actions .action-btn:hover {
    box-shadow: 0 8px 25px rgba(var(--main-color-rgb), 0.15);
  }
  
  .hero-image img {
    transform: translateZ(0);
    will-change: transform, opacity;
  }

  /* El shimmer y los estilos de hover ya no son necesarios
  .obfuscated-text:hover::before {
    opacity: 1;
    animation: shimmer 2s ease-in-out infinite;
  }

  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }
  */
</style>